package com.lh.zksocketc.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksocketc.data.model.BtnStatusData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BTN_STATUS_DATA".
*/
public class BtnStatusDataDao extends AbstractDao<BtnStatusData, Long> {

    public static final String TABLENAME = "BTN_STATUS_DATA";

    /**
     * Properties of entity BtnStatusData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BtnName = new Property(0, String.class, "btnName", false, "BTN_NAME");
        public final static Property BtnId = new Property(1, long.class, "btnId", true, "_id");
        public final static Property BtnStatus = new Property(2, String.class, "btnStatus", false, "BTN_STATUS");
    }


    public BtnStatusDataDao(DaoConfig config) {
        super(config);
    }
    
    public BtnStatusDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BTN_STATUS_DATA\" (" + //
                "\"BTN_NAME\" TEXT," + // 0: btnName
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: btnId
                "\"BTN_STATUS\" TEXT);"); // 2: btnStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BTN_STATUS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BtnStatusData entity) {
        stmt.clearBindings();
 
        String btnName = entity.getBtnName();
        if (btnName != null) {
            stmt.bindString(1, btnName);
        }
        stmt.bindLong(2, entity.getBtnId());
 
        String btnStatus = entity.getBtnStatus();
        if (btnStatus != null) {
            stmt.bindString(3, btnStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BtnStatusData entity) {
        stmt.clearBindings();
 
        String btnName = entity.getBtnName();
        if (btnName != null) {
            stmt.bindString(1, btnName);
        }
        stmt.bindLong(2, entity.getBtnId());
 
        String btnStatus = entity.getBtnStatus();
        if (btnStatus != null) {
            stmt.bindString(3, btnStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public BtnStatusData readEntity(Cursor cursor, int offset) {
        BtnStatusData entity = new BtnStatusData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // btnName
            cursor.getLong(offset + 1), // btnId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // btnStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BtnStatusData entity, int offset) {
        entity.setBtnName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBtnId(cursor.getLong(offset + 1));
        entity.setBtnStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BtnStatusData entity, long rowId) {
        entity.setBtnId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BtnStatusData entity) {
        if(entity != null) {
            return entity.getBtnId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BtnStatusData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
